４J　２４番　クリスティアン　ハルジュノ　テーマ１７　レポート
1. JTextFieldに1行入力してEnterを押すと, 入力された文字列がJTextAreaに追加されていくGUIプログラムを作成せよ. (ソースをレポート)
ファイル名：Field.java
import javax.swing.*;
import javax.swing.border.EmptyBorder;

import java.awt.*;
import java.awt.event.*;
public class Field extends JFrame implements ActionListener {
  private JTextField textField;
  private JTextArea textArea;
  public Field(){
    super();
    this.textField = new JTextField(26);
    this.textField.addActionListener(this);
    this.textField.setPreferredSize(new Dimension(1280, 150));
    this.textField.setBorder(new EmptyBorder(20, 20, 20, 20));

    this.textArea = new JTextArea();
    this.textArea.setPreferredSize(new Dimension(1280, 300));
    this.textArea.setBorder(new EmptyBorder(20, 20 ,20, 20));
    this.textArea.setEditable(false);
    this.textArea.setAutoscrolls(true);

    JPanel mainPanel = new JPanel();
    mainPanel.setLayout(new BorderLayout());

    mainPanel.add(this.textField, BorderLayout.NORTH);
    mainPanel.add(this.textArea, BorderLayout.SOUTH);

    Container container = this.getContentPane();
    container.add(mainPanel);
  }
  public void actionPerformed(ActionEvent e){
    if(e.getSource() == this.textField){
      String enteredText = this.textField.getText();
      if(enteredText.length() == 0 ) return;
      this.textArea.append(enteredText);
      this.textArea.append(System.getProperty("line.separator"));
    }

  }
  public static void main(String[] args){
    Field a = new Field();
    a.setSize(1280, 720);
    a.setLocation(0, 0);
    a.setVisible(true);
  }
}
実行方法：
$ javac Field.java
$ java Field

上側にはJTextFieldクラスを置いてある
下側にはJTextAreaクラスを置いてある

2. ファイル名を入力する欄(JTextField), ファイルを開くボタン(JButton), ファイルの内容を表示するテキストエリア(JTextArea)から成るGUI
プログラムを作成せよ. (ソースをレポート)
ファイル名：Reader.java
import javax.swing.*;
import javax.swing.border.EmptyBorder;

import java.awt.*;
import java.awt.event.*;
import java.io.BufferedReader;
import java.io.FileReader;

public class Reader extends JFrame implements ActionListener{
  private JTextField fileNameField;
  private JTextArea fileContentArea;
  private JButton readButton;
  public Reader(){
    super();
    JPanel inputFrame = new JPanel();
    inputFrame.setLayout(new BorderLayout());

    this.fileNameField = new JTextField(50);
    this.fileNameField.addActionListener(this);
    this.fileNameField.setPreferredSize(new Dimension(1000, 100));
    this.fileNameField.setBorder(new EmptyBorder(10, 10, 10,  10));

    this.readButton = new JButton("読み込み");
    this.readButton.setBackground(Color.blue);
    this.readButton.addActionListener(this);
    this.readButton.setPreferredSize(new Dimension(200, 100));
    inputFrame.add(this.fileNameField, BorderLayout.WEST);
    inputFrame.add(this.readButton, BorderLayout.EAST);

    this.fileContentArea = new JTextArea();
    this.fileContentArea.setLineWrap(true);
    this.fileContentArea.setEditable(false);
    this.fileContentArea.setBorder(new EmptyBorder(20, 20, 20, 20));
    JScrollPane scrollPane = new JScrollPane(this.fileContentArea);
    scrollPane.setPreferredSize(new Dimension(1280, 500));

    JPanel mainFrame = new JPanel();
    mainFrame.setBorder(new EmptyBorder(20, 20, 20, 20));
    mainFrame.setLayout(new BorderLayout());
    mainFrame.add(inputFrame, BorderLayout.NORTH);
    mainFrame.add(scrollPane, BorderLayout.SOUTH);

    Container container = this.getContentPane();
    container.add(mainFrame);

  }
  private void readFile(String fileName){
    String buffer;
    String concat = new String();

    try {
      FileReader fileReader = new FileReader(fileName);
      BufferedReader bufferedReader = new BufferedReader(fileReader);
      while((buffer = bufferedReader.readLine())!= null){
        concat += buffer;
        concat += System.getProperty("line.separator");
      }
      bufferedReader.close();
      fileReader.close();
      this.fileContentArea.setText(concat);
      return;
    }catch(Exception e){
      this.fileContentArea.setText(e.getMessage());
      return;
    }
  }
  public void actionPerformed(ActionEvent e){
    if((e.getSource() == this.readButton || e.getSource() == this.fileNameField) && this.fileNameField.getText().length() != 0){
      this.readFile(this.fileNameField.getText());
    }

  }
  public static void main(String[] args){
    Reader a = new Reader();
    a.setVisible(true);
    a.setLocation(0, 0);
    a.setSize(1280, 720);
  }
}
実行方法：
$ javac Reader.java
$ java Reader

エラーハンドラを作成して追加した。

3. 課題2のプログラムに, さらに保存ボタンを追加し, ファイルを読み込んで編集し, 再びファイルに書き出せるプログラム(テキストエディタ)を
作成せよ. (保存機能に関する部分のソースをレポート)

ボタンを追加
  〜〜〜〜〜〜
  private JButton writeButton;
  〜〜〜〜〜〜
    this.writeButton = new JButton("書き込み");
    this.writeButton.setBackground(Color.red);
    this.writeButton.addActionListener(this);
    this.writeButton.setPreferredSize(new Dimension(200, 100));

    JPanel buttonPanel = new JPanel();
    buttonPanel.setLayout(new FlowLayout());
    buttonPanel.add(this.readButton);
    buttonPanel.add(this.writeButton);
  〜〜〜〜〜〜
actionPerformed関数で
  〜〜〜〜〜〜
    if((e.getSource() == this.writeButton) && this.fileNameField.getText().length() != 0){
        this.writeFile(this.fileNameField.getText());
      }
  〜〜〜〜〜〜
書き込み機能関数
  〜〜〜〜〜〜
  private void writeFile(String fileName){
    try {
      FileWriter fileWriter = new FileWriter(fileName);
      BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
      bufferedWriter.write(this.fileContentArea.getText());
      bufferedWriter.flush();

      bufferedWriter.close();
      fileWriter.close();
    } catch (Exception e){
      System.out.println(e.getMessage());
    }
  }
  〜〜〜〜〜〜

4. 課題3のプログラムに, さらにステータスバー(JLabel)やスクロールバー(JScrollPane), ファイル選択ダイアログ(JFileChooser), ファイルの
新規作成, 検索, 置換等, 締め切りまでに可能な範囲で自由に機能を追加してみよ. 一般的なテキストエディタにはない独創的なアイデア
も良い. (ソース, 追加機能の解説, 将来的にさらに追加してみたい機能をレポート)
ファイル名：Editor.java
import javax.swing.*;
import javax.swing.border.EmptyBorder;

import java.awt.*;
import java.awt.event.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;

public class Editor extends JFrame implements ActionListener{
  private JTextField fileNameField;
  private JTextArea fileContentArea;

  private JButton readButton;
  private JButton writeButton;
  private JButton selectFile;
  private JButton clearFields;


  private JLabel status;
  

  public Editor(){
    super();
    JPanel inputFrame = new JPanel();
    inputFrame.setLayout(new BorderLayout());

    this.fileNameField = new JTextField(80);
    this.fileNameField.addActionListener(this);
    this.fileNameField.setPreferredSize(new Dimension(1000, 100));
    this.fileNameField.setBorder(new EmptyBorder(10, 10, 10,  10));

    this.readButton = new JButton("読み込み");
    this.readButton.setBackground(Color.BLUE);
    this.readButton.setOpaque(true);
    this.readButton.addActionListener(this);
    this.readButton.setPreferredSize(new Dimension(200, 100));

    this.writeButton = new JButton("書き込み");
    this.writeButton.setBackground(Color.RED);  
    this.writeButton.setOpaque(true);
    this.writeButton.addActionListener(this);
    this.writeButton.setPreferredSize(new Dimension(200, 100));

    this.selectFile = new JButton("ファイル選択");
    this.selectFile.setBackground(Color.GREEN);
    this.selectFile.setOpaque(true);
    this.selectFile.addActionListener(this);
    this.selectFile.setPreferredSize(new Dimension(200, 100));

    this.clearFields = new JButton("クリア");
    this.clearFields.setBackground(Color.GREEN);
    this.clearFields.setOpaque(true);
    this.clearFields.addActionListener(this);
    this.clearFields.setPreferredSize(new Dimension(200, 100));

    JPanel buttonPanel = new JPanel();
    buttonPanel.setLayout(new FlowLayout());
    buttonPanel.add(this.readButton);
    buttonPanel.add(this.selectFile);
    buttonPanel.add(this.writeButton);
    buttonPanel.add(this.clearFields);

    inputFrame.add(this.fileNameField, BorderLayout.WEST);
    inputFrame.add(buttonPanel, BorderLayout.EAST);

    this.fileContentArea = new JTextArea();
    this.fileContentArea.setFont(new Font("Serif", Font.PLAIN, 30));
    this.fileContentArea.setLineWrap(true);
    this.fileContentArea.setEditable(true);
    this.fileContentArea.setBorder(new EmptyBorder(20, 20, 20, 20));
    JScrollPane scrollPane = new JScrollPane(this.fileContentArea);
    scrollPane.setPreferredSize(new Dimension(1280, 500));

    this.status = new JLabel("メッセージ：　なし");
    this.status.setFont(new Font("Serif", Font.PLAIN, 30));

    JPanel mainFrame = new JPanel();
    mainFrame.setBorder(new EmptyBorder(20, 20, 20, 20));
    mainFrame.setLayout(new BorderLayout());
    mainFrame.add(inputFrame, BorderLayout.NORTH);
    mainFrame.add(scrollPane, BorderLayout.SOUTH);
    mainFrame.add(this.status, BorderLayout.CENTER);

    Container container = this.getContentPane();
    container.add(mainFrame);

  }
  private void setStatus(String message){
    if(message.isEmpty()) message = "なし";
    this.status.setText("メッセージ：　" + message);
  }
  private boolean readFile(String fileName){
    String buffer;
    String concat = new String();

    try {
      FileReader fileReader = new FileReader(fileName);
      BufferedReader bufferedReader = new BufferedReader(fileReader);
      while((buffer = bufferedReader.readLine())!= null){
        concat += buffer;
        concat += System.getProperty("line.separator");
      }
      bufferedReader.close();
      fileReader.close();
      this.fileContentArea.setText(concat);
      return true;
    }catch(Exception e){
      return false;
    }
  }
  private boolean writeFile(String fileName){
    try {
      FileWriter fileWriter = new FileWriter(fileName);
      BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
      bufferedWriter.write(this.fileContentArea.getText());
      bufferedWriter.flush();

      bufferedWriter.close();
      fileWriter.close();
      return true;
    } catch (Exception e){
      return false;
    }
  }
  private String fileSelector(){
    JFileChooser fileChooser = new JFileChooser();
    int returnValue = fileChooser.showOpenDialog(null);
    if(returnValue == JFileChooser.APPROVE_OPTION){
      File selectedFile = fileChooser.getSelectedFile();
      return selectedFile.getPath();
    }
    return "";
  }
  public void actionPerformed(ActionEvent e){
    if((e.getSource() == this.readButton || e.getSource() == this.fileNameField)){
      if(this.fileNameField.getText().isEmpty()){
        this.setStatus("ファイルパスは空にできません");
        return;
      }
      boolean readStatus = this.readFile(this.fileNameField.getText());
      if(!readStatus){
        this.setStatus("ファイルを読み込みできませんでした。");
      } else {
        this.setStatus("ファイルを読み込みました。");
      }
      return;
    }
    if((e.getSource() == this.writeButton)){
      if(this.fileNameField.getText().isEmpty()){
        this.setStatus("ファイルパスは空にできません");
        return;
      }
      boolean writeStatus = this.writeFile(this.fileNameField.getText());
      if(!writeStatus){
        this.setStatus("ファイルを書き込みできませんでした。");
      } else {
        this.setStatus("ファイルを書き込みました。");
      }
      return;
    }
    if(e.getSource() == this.selectFile){
      String filePath = fileSelector();
      if(filePath.isEmpty()) return;
      this.fileNameField.setText(filePath);
      this.setStatus("ファイルを選択しました。");
    }
    if(e.getSource() == this.clearFields){
      this.fileNameField.setText("");
      this.fileContentArea.setText("");
      this.setStatus("");
    }
  }
  public static void main(String[] args){
    Editor a = new Editor();
    a.setVisible(true);
    a.setLocation(0, 0);
    a.setExtendedState(Frame.MAXIMIZED_BOTH);
  }
}

追加機能の解説:
1. Scrolling
2. file selection
3. status bar
4. clear button