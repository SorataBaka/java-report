2024.04.12 課題4を修正.
４J　24番　クリスティアン　ハルジュノ　テーマ０１　レポート

内容：

1. 
コンパイル方法:
gcc koza.c -o koza

実行方法:
./koza

実行結果:
p234071@jks36:~/Documents/Source Codes/C Language/progen3A/week-1$ ./koza
my_kozaの値は 0x6150e07052a0
利息は50.000000

2.
C言語とJavaの異なる点を載せた.
a. C とは異なり、Java ではすべてが「クラス」内で記述および実行されます。
b. Java の文字列は「+」記号を使用して連結できますが、C では特別な関数が必要でした。
c. Java ソース コードをコンパイルすると、実行可能ファイルではなくクラスが生成されます。

3.
Koza(int gankinInit) {
    riritsu = 0.01;
    gankin = gankinInit;
}
...
Koza my_koza = new Koza(10000);
...
後で定義するではなく、このクラスを発生するとき、gankin変数の値をすぐ定義する

4.
a. 関数Koza_risoku中の「(double)」の効果を説明せよ. doubleの外側に括弧が付いていることに注意.
(double) は、変数の型を整数から double に変換するために使用されます。

b. main関数中の「malloc」を用いている行を詳しく説明せよ. 少なくとも, my_kozaという変数に入っている値の意味は何か, 答えること. 利率や元金の値が直接入っていると考えては間違いである.
malloc は「メモリ割り当て」の略です。 この場合、その変数に特定のメモリ アドレスが割り当てられます。
通常、変数の型を記述してから変数名を記述して変数を宣言します。 これにより、バックグラウンドでその特定の変数のメモリ アドレスが割り当てられますが、空のままになります。 malloc を使用すると、アドレスを値として返し、それを変数に代入します。

c.関数Koza_syokika中の「koza->riritsu」は, メモリ中のどこにあるどの変数を「表している」か, koza変数の値と, 「->」演算子の意味に注意して説明せよ.
矢印は、メモリ アドレスの値を直接指す方法です。 たとえば、変数「age」を含む構造体のメモリ アドレスがあるとします。 最初にアドレスを指定してから変数にアクセスするために「*」記号を使用する代わりに、「->」記号を使用してそのメモリ アドレス内に含まれる変数に即座にアクセスします。

d.関数Koza_syokikaは, なぜ構造体を値渡しではなく, ポインタ(アドレス)渡しで受け取る必要があるのか, 理由を考察せよ. (メモリの使用量やコピーの処理時間が理由ではない)
Koza_syokika 関数は、Koza 構造体の値を変更します。 通常、関数に値を渡すとき、実際にはその変数を新しいメモリ アドレスにコピーします。 そうすることで、Koza_syokika 関数内の値を変更するときに、元の変数は実際には何も変更されません。 つまり、Koza_syokika 関数を呼び出した後は、ロジックを追加しない限り、元の変数自体の値は変わりません。 メモリ自体を渡すことにより、まったく別のメモリ アドレスではなく、元のメモリ アドレス内の値に直接アクセスできます。

e.なぜriritsuの値は関数Koza_syokikaの中で初期化(初めの値を代入)しているのに, gankinはmain関数で値を代入しているのか, その理由を考察せよ.
利率の値はプログラムの寿命の範囲内で複数回設定できる必要があります。 これを main 関数に置くと、一度だけ実行され、残りの存続期間中は変更されません。 関数を使用して値を設定することで、将来的にリリツ値を再設定することができます。